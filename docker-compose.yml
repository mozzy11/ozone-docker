services:

  # Apache HTTPD - Entry point for the application.
  proxy:
    build:
      context: proxy/
      args:
        TIMEZONE: "${TIMEZONE}"
    command: "httpd-foreground ${PROXY_TLS}"
    healthcheck:
      test:
        - CMD
        - curl
        - "-f"
        - "http://localhost/"
    networks:
      ozone:
        aliases:
          - ozone-proxy
          - proxy
    ports:
      - "${PROXY_PUBLIC_PORT}:80"
      - "${PROXY_PUBLIC_PORT_TLS}:443"
      - "8069:8069"
      - "8081:8081"
    volumes:
      - "./proxy/confs:/usr/local/apache2/conf/extra"
      - "${PROXY_TLS_CERTS_PATH:-proxy-tls-certs}:/etc/tls"
    depends_on:
      - frontend
      - openmrs


  # Bahmni Appointments
  appointments:
    image: mekomsolutions/appointments:latest
    healthcheck:
      test:
        - CMD
        - curl
        - "-f"
        - "http://localhost:8903/appointments/index.html"
      timeout: 20s
    networks:
      ozone:
        aliases:
          - appointments-1
  env-substitution:
    image:  mekomsolutions/env-substitution
    environment:
      - ODOO_PUBLIC_URL=${HOST_URL}:8069
      - SENAITE_PUBLIC_URL=${HOST_URL}:8081
      - SUPERSET_PUBLIC_URL=${HOST_URL}:8088
      - OPENMRS_PUBLIC_URL=${HOST_URL}
    volumes:
       - "${DISTRO_PATH}:/opt/env-substitution/files"
    networks:
      ozone:
        aliases:
          - env-substitution
        

  # OpenMRS
  openmrs:
    image: mekomsolutions/openmrs:latest
    depends_on:
      mysql:
        condition: service_started
      env-substitution:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    environment:
      MODULE_WEB_ADMIN: "true"
      DB_AUTO_UPDATE: "true"
      DB_CREATE_TABLES: "true"
      DB_HOST: ${OPENMRS_DB_HOST}
      DB_DATABASE: openmrs
      DB_USERNAME: ${OPENMRS_DB_USER}
      DB_PASSWORD: ${OPENMRS_DB_PASSWORD}
    healthcheck:
      test:
        - CMD
        - curl
        - "-f"
        - "http://localhost:8080/openmrs/"
      timeout: 5s
    networks:
      ozone:
        aliases:
          - openmrs
          - openmrs-tomcat
    volumes:
      - "openmrs-data:/usr/local/tomcat/.OpenMRS/"
      - "${OPENMRS_OWAS_PATH:-openmrs-owas}:/usr/local/tomcat/.OpenMRS/owa/"
      - "${OPENMRS_CORE_PATH}:/usr/local/tomcat/webapps"
      - "${OPENMRS_MODULES_PATH:-openmrs-modules}:/usr/local/tomcat/.OpenMRS/modules/"
      - "${OPENMRS_CONFIG_PATH:-openmrs-config}:/usr/local/tomcat/.OpenMRS/configuration/"
      - "${OPENMRS_CONFIG_CHECKSUMS_PATH:-openmrs-config-checksums}:/usr/local/tomcat/.OpenMRS/configuration_checksums/"
      - "${OZONE_CONFIG_PATH:-ozone-config}/openmrs-properties:/etc/properties/"

  # MySQL
  mysql:
    command: "mysqld --character-set-server=utf8 --collation-server=utf8_general_ci --log-bin --binlog-format=ROW  --server-id=2"
    environment:
      MYSQL_DATABASE: openmrs
      MYSQL_USER: ${OPENMRS_DB_USER}
      MYSQL_PASSWORD: ${OPENMRS_DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      EIP_DB_NAME: ${EIP_DB_NAME}
      EIP_DB_USER: ${EIP_DB_USER}
      EIP_DB_PASSWORD: ${EIP_DB_PASSWORD}
    healthcheck:
      test: "exit 0"
    image: mariadb:10.2
    networks:
      ozone:
        aliases:
          - openmrs-mysql
    volumes:
      - "${MYSQL_DATADIR:-mysql-data}:/var/lib/mysql"
      - "${SQL_SCRIPTS_PATH:-./sqls}/mysql:/docker-entrypoint-initdb.d"
    ports:
      - "3306:3306"
    
  # Postgreql - Database shared by multiple services.
  postgresql:
    image: postgres:13
    command: postgres -c wal_level=logical -c max_wal_senders=10 -c max_replication_slots=10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Analystics
      ANALYTICS_DB_NAME: ${ANALYTICS_DB_NAME}
      ANALYTICS_DB_USER: ${ANALYTICS_DB_USER}
      ANALYTICS_DB_PASSWORD: ${ANALYTICS_DB_PASSWORD}
      # Odoo DB vars
      ODOO_DB_NAME: odoo
      ODOO_DB_USER: ${ODOO_DB_USER}
      ODOO_DB_PASSWORD: ${ODOO_DB_PASSWORD}
      SUPERSET_DB: ${SUPERSET_DB}
      SUPERSET_DB_USER: ${SUPERSET_DB_USER}
      SUPERSET_DB_PASSWORD: ${SUPERSET_DB_PASSWORD}
    networks:
      ozone:
        aliases:
          - odoo-postgresql
          - odoo-14
    volumes:
      - ${POSTGRES_DATADIR:-postgresql-data}:/var/lib/postgresql/data
      - "${SQL_SCRIPTS_PATH:-./sqls}/postgresql:/docker-entrypoint-initdb.d"
    ports:
      - "5432:5432"
    

  # Odoo - The ERP component of Ozone.
  odoo:
    depends_on:
      postgresql:
        condition: service_healthy
    image: mekomsolutions/odoo
    environment:
      - HOST=${POSTGRES_DB_HOST}
      - USER=${ODOO_DB_USER}
      - PASSWORD=${ODOO_DB_PASSWORD}
      - ADDONS=sale_management,stock,account_account,purchase,mrp,odoo_initializer,ozone_settings,mrp_product_expiry,product_expiry,l10n_generic_coa
      - INITIALIZER_DATA_FILES_PATH=/mnt/odoo_csv
      - INITIALIZER_CONFIG_FILE_PATH=/mnt/odoo_config/initializer_config.json
    networks:
      ozone:
        aliases:
          - odoo-14
    volumes:
      - "${ODOO_FILESTORE:-odoo-filestore}:/var/lib/odoo/filestore"
      - "${ODOO_EXTRA_ADDONS:-odoo-extra-addons}:/mnt/extra-addons"
      - "${ODOO_CONFIG_PATH:-odoo-config}:/mnt/odoo_config"
      - "${ODOO_INITIALIZER_CONFIG_FILE_PATH:-odoo-config}:/mnt/odoo_config/initializer_config.json"
      - "${ODOO_CONFIG_FILE_PATH:-odoo-config}:/etc/properties/odoo.conf"
      - odoo-checksums:/mnt/checksums

  # OpenMRS 3 Microfrontends
  frontend:
    image: openmrs/openmrs-reference-application-3-frontend:${TAG:-nightly}
    environment:
      SPA_PATH: /openmrs/spa
      API_URL: /openmrs
      SPA_CONFIG_URLS: /openmrs/spa/ozone/ozone-frontend-config.json
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      timeout: 5s
    volumes:
      - "${OZONE_CONFIG_PATH}/frontend:/usr/share/nginx/html/ozone"
    networks:
      ozone:
        aliases:
          - frontend
  redis:
    image: redis
    restart: always
    volumes:
      - redis:/data
    networks:
      ozone:
        aliases:
          - redis
  superset:
    image: amancevice/superset:1.5.1
    restart: always
    depends_on:
      redis:
        condition: service_started
      postgresql:
        condition: service_started
      superset-init:
        condition: service_completed_successfully
    ports:
      - "8088:8088"
    environment:
      - DATABASE_HOST=${POSTGRES_DB_HOST}
      - DATABASE_DB=${SUPERSET_DB}
      - DATABASE_USER=${SUPERSET_DB_USER}
      - DATABASE_PASSWORD=${SUPERSET_DB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ADMIN_PASSWORD=${SUPERSET_ADMIN_PASSWORD}
      - ANALYTICS_DB_PASSWORD=${ANALYTICS_DB_PASSWORD}
    volumes:
      - ./superset:/etc/superset
    networks:
      ozone:
        aliases:
          - superset
  superset-worker:
    image: amancevice/superset:1.5.1
    restart: always
    depends_on:
      redis:
        condition: service_started
      postgresql:
        condition: service_started
      superset-init:
        condition: service_completed_successfully
    volumes:
      - ./superset:/etc/superset
    environment:
      - DATABASE_HOST=${POSTGRES_DB_HOST}
      - DATABASE_DB=${SUPERSET_DB}
      - DATABASE_USER=${SUPERSET_DB_USER}
      - DATABASE_PASSWORD=${SUPERSET_DB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ADMIN_PASSWORD=${SUPERSET_ADMIN_PASSWORD}
      - ANALYTICS_DB_PASSWORD=${ANALYTICS_DB_PASSWORD}
    command: "celery worker --app=superset.tasks.celery_app:app"
    networks:
      ozone:
        aliases:
          - superset-worker
  superset-init:
    image: amancevice/superset:1.5.1
    restart: on-failure
    depends_on:
      - postgresql
      - redis
    volumes:
      - ./superset:/etc/superset
    environment:
      - DATABASE_HOST=${POSTGRES_DB_HOST}
      - DATABASE_DB=${SUPERSET_DB}
      - DATABASE_USER=${SUPERSET_DB_USER}
      - DATABASE_PASSWORD=${SUPERSET_DB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ADMIN_PASSWORD=${SUPERSET_ADMIN_PASSWORD}
      - ANALYTICS_DB_PASSWORD=${ANALYTICS_DB_PASSWORD}
    command: "/etc/superset/superset-init.sh"
    networks:
      ozone:
        aliases:
          - superset-init
  # senaite:
  #   environment: 
  #     - SITE=${SITE}
  #     - ADMIN_USER=${ADMIN_USER}
  #     - ADMIN_PASSWORD=${ADMIN_PASSWORD}
  #   image: mekomsolutions/senaite:latest
  #   volumes:
  #   - ${SENAITE_CONFIG_PATH}/data:/data/importdata/senaite
  #   - senaite-filestorage:/data/filestorage
  #   - senaite-blobstorage:/data/blobstorage
  #   networks:
  #     ozone:
  #       aliases:
  #         - senaite
  #   depends_on: 
  #     env-substitution:
  #       condition: service_completed_successfully
  eip_client: 
    image: mekomsolutions/eip-client
    volumes:
      - "${EIP_PATH:-eipapp}/config:/config"
      - "${EIP_PATH:-eipapp}/routes:/routes"
      - eip-home:/eip-home
    environment:
      - OAUTH_ENABLED=${OAUTH_ENABLED}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
      - OAUTH_ACCESS_TOKEN_URI=${OAUTH_ACCESS_TOKEN_URI}
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - EIP_DB_NAME=${EIP_DB_NAME}
      - EIP_DB_USER=${EIP_DB_USER}
      - EIP_DB_PASSWORD=${EIP_DB_PASSWORD}
      - OPENMRS_DB_HOST=${OPENMRS_DB_HOST}
      - OPENMRS_DB_PORT=${OPENMRS_DB_PORT}
      - OPENMRS_DB_NAME=${OPENMRS_DB_NAME}
      - OPENMRS_DB_USER=${OPENMRS_DB_USER}
      - OPENMRS_DB_PASSWORD=${OPENMRS_DB_PASSWORD}
      - OPENMRS_USER=${OPENMRS_USER}
      - SENAITE_USERNAME=${ADMIN_USER}
      - SENAITE_PASSWORD=${ADMIN_PASSWORD}
      - OPENMRS_PASSWORD=${OPENMRS_PASSWORD}
      - MYSQL_ADMIN_USER=root
      - MYSQL_ADMIN_USER_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - ODOO_DATABASE=${ODOO_DATABASE}
      - ODOO_USER=${ODOO_USER}
      - ODOO_PASSWORD=${ODOO_PASSWORD}
      - RESULTS_ENCOUNTER_TYPE_UUID=${RESULTS_ENCOUNTER_TYPE_UUID}
      - CONCEPT_COMPLEX_UUID=${CONCEPT_COMPLEX_UUID}
      - OPENMRS_IDENTIFIER_TYPE_UUD=${OPENMRS_IDENTIFIER_TYPE_UUD}
      - DB_EVENT_DESTINATIONS=${DB_EVENT_DESTINATIONS}
      - CREATE_CUSTOMER_IF_NOT_EXIST=${CREATE_CUSTOMER_IF_NOT_EXIST}
      - SENAITE_URL=http://senaite:8080
      - OPENMRS_URL=http://openmrs:8080
      - ODOO_URL=http://odoo:8069
    networks:
      ozone:
        aliases:
          - eip_client
    depends_on: 
      env-substitution:
        condition: service_completed_successfully
      openmrs:
        condition: service_started
      odoo:
        condition: service_started
      # senaite:
      #   condition: service_started
      
    ports:
    - "8083:8083"

# OpenELIS SETUP
  openhim-core:
    container_name: openhim-core
    hostname: openhim-core
    image: jembi/openhim-core:latest
    restart: unless-stopped
    environment:
      mongo_url: "mongodb://mongo-db/openhim"
      mongo_atnaUrl: "mongodb://mongo-db/openhim"
      NODE_ENV: "development"
  
    ports:
    #   - 5000
    #   - 5001
      - 8080:8080


  openhim-console:
    container_name: openhim-console
    hostname: openhim-console
    image: jembi/openhim-console:latest
    restart: unless-stopped
    volumes:
      - ./openelis/openhim/console.json:/usr/share/nginx/html/config/default.json
    healthcheck:
      test: "curl -sS http://openhim-console || exit 1"
      interval: 10s
      timeout: 60s
      retries: 3
    ports: 
       - 3000:80


  # Loads Default OpenHIM Config
  openhim-config:
    container_name: openhim-config
    image: ghcr.io/i-tech-uw/openhim-config:v0.0.0
    volumes:
      - ./openelis/openhim/initial-config.json:/app/test-openhim-config.json

  mongo-db:
    container_name: mongo-db
    image: mongo:3.4
    volumes:
      - /data/db
    restart: unless-stopped
 
  ####
  # OpenELIS
  ####
  certs:
    container_name: oe-certs
    image: ghcr.io/i-tech-uw/certgen:main
    restart: always
    environment:
      - KEYSTORE_PW="kspass"
      - TRUSTSTORE_PW="tspass"
    volumes:
      - cert-volume:/etc/openelis-global
      - keys-vol:/etc/ssl/private/
      - certs-vol:/etc/ssl/certs/


  database:
    container_name: openelisglobal-database
    image: postgres:9.5
    # ports:
    #   - "15432:5432"
    restart: always
    env_file:
      - ./openelis/database/database.env
    volumes:
      # preserves the database between containers
      - db-data:/var/lib/postgresql/data
        # files here will run on install
      - ./openelis/database/dbInit:/docker-entrypoint-initdb.d

    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "clinlims", "-U", "clinlims"]
      timeout: 45s
      interval: 10s
      retries: 10

  oe.openelis.org:
    container_name: openelisglobal-webapp
    image: ghcr.io/i-tech-uw/openelis-global-2:develop
    depends_on:
      - database
    ports:
    #   - "8095:8080"
       - "8443:8443"
    restart: always
    environment:
      - TZ=Africa/Nairobi
        # context.xml doesn't seem to be able to pick up environment variables directly, so we are passing them in as CATALINA_OPTS
      - CATALINA_OPTS= -Ddatasource.url=jdbc:postgresql://database:5432/clinlims -Ddatasource.username=clinlims -Ddatasource.password=clinlims
    volumes:
      - cert-volume:/etc/openelis-global
      # -  openelis-plugins-data:/var/lib/openelis-global/plugins
      - ./openelis/tomcat/oe_server.xml:/usr/local/tomcat/conf/server.xml
    secrets:
      - source: datasource.password
      - source: common.properties


  fhir.openelis.org:
    container_name: external-fhir-api
    image: hapiproject/hapi:v5.5.1
    # ports:
    # - "8081:8080"
    restart: always
    environment:
      - hapi.fhir.auto_create_placeholder_reference_targets=true
      - hapi.fhir.allow_placeholder_references=true
      - hapi.fhir.allow_external_references=true
  

  fhir.openelis.org.remote:
    container_name: openelis-remote-source
    image: hapiproject/hapi:v5.5.1
    # ports:
    #   - "8081:8080"
    restart: always
    environment:
      - hapi.fhir.auto_create_placeholder_reference_targets=true
      - hapi.fhir.allow_placeholder_references=true
      - hapi.fhir.allow_external_references=true
  

secrets:
  datasource.password:
    file: ./volume/properties/datasource.password
  common.properties:
    file: ./volume/properties/common.properties

    
version: "3.7"
volumes:
  proxy-tls-certs: ~
  openmrs-data: ~
  mysql-data: ~
  openmrs-config: ~
  openmrs-config-checksums: ~
  openmrs-modules: ~
  openmrs-owas: ~
  ozone-config: ~
  ozone-obscalculator: ~
  ozone-apps: ~
  ozone-home: ~
  postgresql-data: ~
  odoo-extra-addons: ~
  odoo-web-data: ~
  odoo-config: ~
  odoo-filestore: ~
  ozone-reports-data: ~
  senaite-data: ~
  eip-home: ~
  redis: ~
  senaite-filestorage: ~
  senaite-blobstorage: ~
  odoo-checksums: ~
  db-data:
  cert-volume:
  certs-vol:
  keys-vol:
networks:
  ozone:
